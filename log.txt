## VẤN ĐỀ MỚI ĐƯỢC PHÁT HIỆN

### ⚠️ VẤN ĐỀ NHỎ:
1. **Scenarios Page - Smart Scenario Generation**: Chức năng tạo kịch bản thông minh (`Smart Scenario Generation`) hiện đang mô phỏng API call và tạo dữ liệu giả lập, chưa tích hợp với mô hình AI/ML thực tế.
2. **Scenarios Page - Export Functionality**: Chức năng xuất dữ liệu kịch bản hiện chỉ hỗ trợ xuất CSV cơ bản. Cần xem xét mở rộng sang các định dạng khác (ví dụ: PDF) hoặc cung cấp các tùy chọn xuất nâng cao hơn.

### 🔍 PHÂN TÍCH CHI TIẾT CÁC TRANG DASHBOARD

#### 1. `/dashboard/achievements`
- **Tình trạng dữ liệu**: Trang này tích hợp với `DashboardService` để lấy dữ liệu thành tích và kinh nghiệm người dùng. Tuy nhiên, nó sử dụng một mảng `achievements` được hardcode làm dữ liệu dự phòng (fallback) nếu không có dữ liệu từ cơ sở dữ liệu. Điều này đảm bảo giao diện luôn hiển thị nhưng có thể gây nhầm lẫn nếu người dùng mong đợi chỉ dữ liệu thực.
- **Logic hardcode**: 
    - **Ánh xạ biểu tượng**: Logic ánh xạ các danh mục thành tích với các biểu tượng cụ thể (ví dụ: `Home`, `BarChart3`) được hardcode trực tiếp trong component. Việc thay đổi hoặc thêm danh mục mới sẽ yêu cầu sửa đổi code.
    - **Tính toán cấp độ**: Công thức tính toán cấp độ người dùng (`Math.floor(totalXP / 500) + 1`) được hardcode. Nếu hệ thống cấp độ thay đổi, công thức này cần được cập nhật thủ công.
    - **Màu sắc**: Các ánh xạ màu sắc cho độ hiếm (rarity) và trạng thái (status) của thành tích cũng được hardcode.

#### 2. `/dashboard/analytics`
- **Tình trạng dữ liệu**: Trang này lấy dữ liệu phân tích và các chỉ số dashboard từ `DashboardService`. Tuy nhiên, nhiều phần vẫn sử dụng dữ liệu placeholder hoặc hardcode.
- **Dữ liệu Placeholder/Hardcode**: 
    - **Lựa chọn khoảng thời gian**: Mảng `periods` được hardcode.
    - **Thẻ chỉ số**: Các giá trị `change` và `trend` (ví dụ: `+2.5%`, `up`) trên các thẻ chỉ số được hardcode và có ghi chú "Có thể được tính toán từ dữ liệu lịch sử". Điều này cho thấy thiếu tính năng phân tích xu hướng động.
    - **Biểu đồ/Trực quan hóa**: 
        - Biểu đồ hiệu suất (`Performance chart`) được đánh dấu rõ ràng là placeholder.
        - Các chỉ số xu hướng thị trường (`Market Trend Indicators`) sử dụng `Math.random()` để tạo phần trăm thay đổi, cho thấy dữ liệu giả lập.
        - Phần "Xu hướng theo khu vực" sử dụng một mảng dữ liệu hardcode cho các khu vực, thay đổi và giá cả.
    - **Mục tiêu tài chính**: Các giá trị mục tiêu cho "Giá trị danh mục đầu tư" (5 tỷ VND), "Thu nhập hàng tháng" (30 triệu VND) và "Số kế hoạch đầu tư" (10 kế hoạch) được hardcode.
    - **Mục tiêu chi tiết**: Các phần "Căn nhà đầu tiên", "Thu nhập thụ động" và "Danh mục đa dạng" có các giá trị mục tiêu hardcode và logic đơn giản hóa để xác định trạng thái.

#### 3. `/dashboard/billing`
- **Cấu trúc**: Trang này hoạt động như một container cho các component `SubscriptionCard` và `BillingHistory`. 
- **Tích hợp dữ liệu**: Trang này không trực tiếp lấy dữ liệu mà phụ thuộc vào các component con (`SubscriptionCard` và `BillingHistory`) để xử lý việc lấy và hiển thị dữ liệu của riêng chúng. Dựa trên `log.txt` trước đó, trang thanh toán được đánh dấu là "HOÀN CHỈNH - Đã tích hợp database", ngụ ý rằng các component con này đã được tích hợp đúng cách.

#### 4. `/dashboard` (Trang chính Dashboard)
- **Tình trạng dữ liệu**: Trang này lấy nhiều dữ liệu từ `DashboardService` (metrics, market insights, notifications, achievements, user experience). Có dữ liệu dự phòng (`fallbackData`) cho người dùng chưa xác thực hoặc khi có lỗi.
- **Dữ liệu Placeholder/Hardcode**: 
    - **Tab "Phân tích đầu tư"**: Đây là một placeholder rõ ràng với văn bản `investmentAnalysis.placeholder` và biểu tượng biểu đồ hình tròn chung chung. Cần triển khai biểu đồ phân tích đầu tư thực tế.
    - **Tab "Lịch tài chính" (Lịch)**: Tab này chứa các sự kiện được hardcode với ngày và giá trị cụ thể (ví dụ: "Thanh toán lãi vay tháng 8", "Đánh giá lại danh mục đầu tư"). Phần "Tổng quan tháng này" cũng có các giá trị hardcode cho mục tiêu tiết kiệm, thu nhập, chi phí và các ngày quan trọng. Điều này xác nhận ghi chú trước đó trong `log.txt` về việc tab Lịch có nội dung placeholder.
    - **Tính toán "Tóm tắt danh mục đầu tư"**: Giá trị `totalDownPayment` trong `portfolioSummary` được ghi chú là "Calculate from plans if needed", cho thấy nó hiện không được tính toán từ dữ liệu thực.
    - **Hành động nhanh**: Mảng `quickActions` được hardcode với các liên kết và biểu tượng cụ thể.

#### 5. `/dashboard/help`
- **Tình trạng dữ liệu**: Trang này lấy các mục FAQ và phiếu hỗ trợ từ `DashboardService`. Tuy nhiên, nó sử dụng dữ liệu dự phòng hardcode.
- **Dữ liệu Placeholder/Hardcode**: 
    - **Mục FAQ**: Sử dụng một mảng `faqItems` hardcode làm dữ liệu dự phòng nếu không có dữ liệu từ cơ sở dữ liệu.
    - **Liên kết nhanh**: Mảng `quickLinks` được hardcode với tiêu đề, mô tả, biểu tượng và giá trị `href`. Các liên kết này trỏ đến các trang tài liệu tĩnh hoặc tài nguyên bên ngoài, có thể không được quản lý động.
    - **Phiếu hỗ trợ**: Sử dụng một mảng `supportTickets` hardcode làm dữ liệu dự phòng nếu không có dữ liệu từ cơ sở dữ liệu.
    - **Thông tin liên hệ**: Email (`support@finhome.vn`), số điện thoại (`1900 1234`) và tình trạng sẵn có của trò chuyện được hardcode.
    - **Biểu tượng/Màu sắc trạng thái**: Các đối tượng `statusIcons` và `statusColors` được hardcode cho các trạng thái phiếu hỗ trợ.

#### 6. `/dashboard/laboratory`
- **Tình trạng dữ liệu**: Trang này lấy các kế hoạch tài chính từ `DashboardService`. Sử dụng `demoPlans` làm dữ liệu dự phòng cho người dùng chưa xác thực.
- **Logic hardcode/Đơn giản hóa**: 
    - **Hàm `calculateLoanDetails`**: 
        - `interestRate` được hardcode là `8.5`.
        - `termYears` được hardcode là `20`.
        - Hàm này thực hiện các phép tính khoản vay cơ bản nhưng không lấy các tham số này từ kế hoạch tài chính đã chọn hoặc một nguồn động. Đây là một hạn chế đáng kể đối với tính năng "phòng thí nghiệm" được thiết kế để "phân tích giả định" (what-if analysis).
    - **`demoPlans`**: Mặc dù là dữ liệu dự phòng, mảng `demoPlans` chứa dữ liệu kế hoạch tài chính hardcode, bao gồm `calculatedMetrics` có thể không phản ánh các phép tính thực tế.
    - **`handleCreateNewPlan`**: Hàm này hiện chỉ ghi log vào console và không điều hướng đến trang tạo kế hoạch mới, đây là một tính năng điều hướng bị thiếu.
    - **Nội dung giáo dục**: Phần "Nội dung giáo dục" (ví dụ: "usageGuide.earlyRepayment", "usageGuide.refinancing", "usageGuide.stressTest") dường vẻ là văn bản tĩnh, không được tạo động dựa trên tương tác hoặc phân tích của người dùng.

#### 7. `/dashboard/plans` (Trang chính)
- **Tình trạng dữ liệu**: Trang này lấy các kế hoạch tài chính bằng cách sử dụng `getUserFinancialPlans` từ `@/lib/supabase/server` (server-side data fetching).
- **Cấu trúc**: Trang này chủ yếu sử dụng component `PlansList` để hiển thị các kế hoạch.

#### 7.1. `src/components/plans/PlansList.tsx`
- **Hiển thị dữ liệu**: Component này nhận một mảng `plans` (kiểu `FinancialPlan[]`) làm prop và hiển thị chúng dưới dạng lưới.
- **Logic hardcode**: 
    - **Ánh xạ trạng thái và loại**: Các hàm `getStatusLabel`, `getStatusVariant` và `getTypeLabel` sử dụng các câu lệnh `switch` với các giá trị chuỗi hardcode cho `status` và `plan_type` của kế hoạch. Mặc dù chúng sử dụng `next-intl` để dịch, logic cơ bản để ánh xạ trạng thái/loại với nhãn và biến thể là hardcode. Bất kỳ trạng thái hoặc loại mới nào sẽ yêu cầu sửa đổi code.
    - **Nút hành động**: Các nút "Edit" và "Delete" đều có mặt. Nút "Edit" liên kết đến trang chỉnh sửa. Nút "Delete" có mặt nhưng không có trình xử lý `onClick`, có nghĩa là chức năng xóa không được triển khai trực tiếp trong component này. Có khả năng nó được xử lý ở nơi khác (ví dụ: trong một component cha hoặc một modal được kích hoạt bởi nút này, nhưng code hiện tại không hiển thị điều đó).

#### 8. `/dashboard/profile`
- **Tình trạng dữ liệu**: Trang này lấy dữ liệu hồ sơ người dùng bằng cách sử dụng hook `useProfile` và xử lý cập nhật thông qua `updateProfile`.
- **Tính năng bị thiếu/Hardcode**: 
    - **Tải ảnh đại diện**: Nút "Upload" cho ảnh đại diện bị `disabled` và có văn bản "Coming Soon" (`t('picture.comingSoon')`). Điều này cho thấy chức năng tải ảnh đại diện chưa được triển khai.
    - **Trường email**: Trường email bị `disabled` và giá trị của nó được lấy trực tiếp từ `user?.email`. Đây là một lựa chọn thiết kế, không phải là một tính năng bị thiếu, ngụ ý rằng việc thay đổi email được xử lý thông qua cài đặt xác thực.

#### 9. `/dashboard/scenarios`
- **Tình trạng dữ liệu**: Trang này lấy các kịch bản tài chính từ `DashboardService.getFinancialScenarios`. Sử dụng `demoScenarios` làm dữ liệu dự phòng cho người dùng chưa xác thực hoặc nếu không có dữ liệu từ cơ sở dữ liệu.
- **Hàm `createMockScenario`**: Hàm này được sử dụng để tạo cả `demoScenarios` và để *chuyển đổi* các kịch bản từ cơ sở dữ liệu sang định dạng `TimelineScenario`. Đây là một điểm quan trọng:
    - Nó hardcode nhiều trường (ví dụ: `purchase_price`, `down_payment`, `monthly_income`, `expected_roi`, `risk_tolerance`, `is_favorite`, `roi`, `total_progress`, `financial_progress`, `monthly_contribution`, `estimated_completion_date`, `tags`, `notes`, `shared_with`).
    - Quan trọng hơn, `calculatedMetrics` trong `TimelineScenario` cũng được hardcode trong `createMockScenario` (ví dụ: `dtiRatio: 35`, `ltvRatio: 80`, `affordabilityScore: 7`, `monthlySavings: 0`). Điều này có nghĩa là ngay cả khi các kịch bản thực từ cơ sở dữ liệu được tải, các chỉ số tính toán của chúng bị *ghi đè* hoặc *tạo ra* bởi hàm mock này, thay vì được suy ra từ các phép tính tài chính thực tế dựa trên các tham số của kịch bản. Điều này hạn chế nghiêm trọng khả năng và độ chính xác của phân tích "what-if".
- **"Tạo kịch bản thông minh" (`handleGenerateSmartScenarios`)**: Chức năng này mô phỏng một lệnh gọi API và thêm các kịch bản thông minh *mock* bằng cách sử dụng `createMockScenario`. Nó không tích hợp với mô hình AI/ML thực tế để tạo kịch bản thông minh.
- **"Chức năng xuất" (`handleExportScenarios`)**: Chức năng này chỉ thực hiện xuất CSV cơ bản. Có một nhận xét "Export selected scenarios to CSV or PDF", nhưng chỉ CSV được triển khai.
- **Logic/Giá trị hardcode**: 
    - **Màu sắc cấp độ rủi ro và loại**: Các hàm `getRiskLevelColor` và `getTypeColor` sử dụng các lớp màu hardcode dựa trên các chuỗi `riskLevel` và `scenarioType`.
    - **Lọc kịch bản**: Các tùy chọn lọc cho `riskLevel` và `filterType` được hardcode trong các component `Select`.
    - **Tab "Phân tích" - Phân tích rủi ro**: Phép tính `monthlySavings` trong phần phân tích rủi ro dựa vào `calculatedMetrics` hardcode từ `createMockScenario`.
    - **Tab "Phân tích" - Đề xuất**: Logic đề xuất dựa trên việc sắp xếp theo `totalCost` từ `calculatedMetrics` (được mock) và cung cấp văn bản hardcode cho các đề xuất.

#### 10. `/dashboard/settings`
- **Tình trạng dữ liệu**: Trang này lấy dữ liệu tùy chọn người dùng và hồ sơ từ `DashboardService` bằng cách sử dụng `getUserPreferences` và `getUserProfile`. Các cập nhật được xử lý bởi `updateUserProfile` và `updateUserPreferences`.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Cài đặt chung**: 
        - Các tùy chọn cho `language`, `currency`, `timezone`, `theme`, `dashboardLayout` và `profileVisibility` được hardcode trong các component `SelectItem`. Mặc dù đây là các tùy chọn phổ biến, chúng không được tải động.
        - Trường `monthlyIncome` có trong state và `updateUserProfile` nhưng không được hiển thị trong giao diện người dùng.
        - Các trường `city`, `district` và `address` có trong state và `updateUserProfile` nhưng không được hiển thị trong giao diện người dùng.
    - **Tab Bảo mật**: 
        - Chức năng "Cập nhật mật khẩu" có các trường nhập liệu nhưng thiếu triển khai thực tế để cập nhật mật khẩu (không có trình xử lý `onClick` trên nút "Cập nhật mật khẩu").
        - "Xác thực hai yếu tố" và "Phiên đăng nhập" có các nút "Kích hoạt" và "Xem chi tiết" tương ứng, nhưng các chức năng này chưa được triển khai.
    - **Tab Tài khoản**: 
        - "Xuất dữ liệu" có nút nhưng không có triển khai để xuất dữ liệu.
        - "Xóa tài khoản" có nút nhưng không có triển khai để xóa tài khoản.

#### 11. `/public/banks`
- **Cấu trúc**: Trang này chủ yếu sử dụng component `BankRateComparison` cho nội dung chính và hiển thị chi tiết ngân hàng đã chọn ở thanh bên.
- **Tích hợp dữ liệu**: Trang này không trực tiếp lấy dữ liệu ngân hàng; nó phụ thuộc vào component `BankRateComparison` và kiểu `BankLoanProduct` từ `@/lib/services/bankService`. Để đánh giá đầy đủ tích hợp dữ liệu, cần phải điều tra `BankRateComparison.tsx` và `bankService.ts`.
- **Giá trị hardcode/Placeholder**: 
    - **Huy hiệu trong tiêu đề**: Huy hiệu "Bank Count" là tĩnh và không được cập nhật động.
    - **Tab "Xu hướng"**: 
        - Khu vực biểu đồ được đánh dấu rõ ràng là placeholder: `trends.chartPlaceholder`.
        - "Tỷ lệ trung bình" (7.8%, 8.2%, 8.6%) được hardcode.
        - "Dự báo" (mô tả Q1, Q2) được hardcode.
    - **Tab "Hướng dẫn"**: Toàn bộ hướng dẫn từng bước và các phần yêu cầu là các danh sách hardcode.
    - **Thanh bên - "Tỷ lệ thị trường hiện tại"**: Các tỷ lệ "Thấp nhất" (7.3%), "Trung bình" (8.1%) và "Cao nhất" (9.2%) được hardcode. `lastUpdate` cũng là một văn bản tĩnh.
    - **Thanh bên - "Máy tính nhanh"**: Các mẹo được cung cấp là hardcode.

#### 12. `/public/investments`
- **Cấu trúc**: Trang này chủ yếu hoạt động như một container cho component `InvestmentPortfolio`.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Huy hiệu tiêu đề**: Các huy hiệu trong tiêu đề ("Cập nhật thời gian thực" và "Phân tích chuyên sâu") là văn bản hardcode và không phản ánh trạng thái động hoặc các tính năng thực tế.
    - **Nút "Tính Toán ROI"**: Nút này có mặt nhưng không có trình xử lý `onClick`, có nghĩa là chức năng "Tính Toán ROI" không được triển khai trực tiếp trên trang này. Có khả năng nó được mong đợi sẽ được xử lý trong component `InvestmentPortfolio` hoặc một modal/trang riêng biệt.

#### 13. `/public/plans` (Trang công khai)
- **Tình trạng dữ liệu**: Trang này lấy một kế hoạch tài chính công khai duy nhất từ Supabase dựa trên `planId`. Nó cũng tăng `view_count` cho kế hoạch.
- **Cấu trúc**: Trang này sử dụng `PlanDetailView` để hiển thị chi tiết kế hoạch.
- **Tính năng bị thiếu/Hardcode**: Trang này chủ yếu chịu trách nhiệm lấy và truyền dữ liệu kế hoạch công khai cho `PlanDetailView`. Để đánh giá đầy đủ phần này, cần phải điều tra component `PlanDetailView`. Tuy nhiên, mục `log.txt` trước đó cho `/dashboard/plans` đã nêu rằng `PlanDetailView` có tích hợp cơ sở dữ liệu, vì vậy có thể giả định rằng component `PlanDetailView` đã được tích hợp tốt.

#### 14. `/public/pricing`
- **Cấu trúc**: Trang này chủ yếu sử dụng component `PricingSection`.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Phần FAQ**: Toàn bộ phần FAQ, bao gồm các câu hỏi và câu trả lời, được hardcode trực tiếp trong component trang. Điều này có nghĩa là bất kỳ cập nhật hoặc bổ sung nào cho FAQ sẽ yêu cầu thay đổi code và triển khai lại. Một cách tiếp cận động hơn sẽ là lấy FAQ từ hệ thống quản lý nội dung hoặc cơ sở dữ liệu.

#### 15. `/public/properties`
- **Tình trạng dữ liệu**: Trang này sử dụng component `PropertySearch` để xử lý kết quả tìm kiếm và lựa chọn bất động sản. Nó cũng tương tác với `propertyService` để bật/tắt yêu thích.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Huy hiệu tiêu đề**: Huy hiệu trong tiêu đề "Thị trường đang tăng 8.5%" được hardcode. Điều này lý tưởng nên là động và phản ánh xu hướng thị trường thực tế.
    - **Placeholder hình ảnh bất động sản**: Phần "Chi Tiết Bất Động Sản Đã Chọn" sử dụng rõ ràng một placeholder cho hình ảnh bất động sản.
    - **Các chỉ số đầu tư**: Mặc dù `roiProjection` và `monthlyMortgageEstimate` được truyền từ `selectedProperty`, `rentalYield` cũng được hiển thị nếu có. Các phép tính cho các chỉ số này không hiển thị trên trang này, ngụ ý rằng chúng được xử lý trong `PropertySearch` hoặc `propertyService`. Mục `log.txt` trước đó cho `/dashboard/analytics` đã đề cập rằng `propertyService` sử dụng "dữ liệu giả lập hoặc logic đơn giản" cho các phép tính nâng cao (ROI, rủi ro, v.v.), đây là một vấn đề cần quan tâm ở đây.
    - **Mẹo thị trường**: Phần "Mẹo Đầu Tư" chứa các mẹo hardcode. Lý tưởng nhất là chúng nên là động và có thể được cá nhân hóa.

#### 16. `/marketing/legal/cookies`
- **Nguồn nội dung**: Toàn bộ nội dung chính sách cookie được lấy bằng cách sử dụng bản dịch `next-intl`.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Ngày `lastUpdated`**: Biến `lastUpdated` được hardcode thành `'January 1, 2024'`. Mặc dù khóa dịch cho phép định dạng theo ngôn ngữ cụ thể, bản thân ngày này là tĩnh. Lý tưởng nhất, ngày này nên được quản lý động (ví dụ: từ CMS hoặc tệp cấu hình) để phản ánh ngày cập nhật thực tế của chính sách.
    - **`contactEmail`**: `contactEmail` được lấy từ `process.env.CONTACT_EMAIL` nhưng sẽ sử dụng giá trị mặc định hardcode là `'privacy@company.com'` nếu biến môi trường không được đặt. Đây là một giá trị hardcode tiềm năng nếu biến môi trường không được cấu hình nhất quán.
    - **Quản lý chính sách**: Nội dung chính sách là tĩnh trong các tệp dịch. Đối với các tài liệu pháp lý, thường có lợi hơn khi quản lý chúng thông qua CMS hoặc cơ sở dữ liệu để cho phép những người không phải là nhà phát triển cập nhật chúng mà không cần thay đổi code.

#### 17. `/marketing/legal/privacy`
- **Nguồn nội dung**: Không giống như trang `cookies`, nội dung chính của chính sách quyền riêng tư (tiêu đề, đoạn văn, mục danh sách) được *hardcode trực tiếp trong JSX*. Nó không sử dụng bản dịch `next-intl` cho chính văn bản chính sách, chỉ cho siêu dữ liệu. Đây là một sự khác biệt đáng kể và là một vấn đề hardcode lớn đối với một ứng dụng đa ngôn ngữ.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Ngày `lastUpdated`**: Hardcode thành `'January 1, 2024'`. Tương tự như trang `cookies`, ngày này nên là động.
    - **`companyName`**: Lấy từ `process.env.NEXT_PUBLIC_APP_NAME` nhưng sẽ sử dụng giá trị mặc định hardcode là `'FinHome'`.
    - **`contactEmail`**: Lấy từ `process.env.CONTACT_EMAIL` nhưng sẽ sử dụng giá trị mặc định hardcode là `'privacy@company.com'`.
    - **`websiteUrl`**: Lấy từ `process.env.NEXT_PUBLIC_APP_URL` nhưng sẽ sử dụng giá trị mặc định hardcode là `'https://yourcompany.com'`.
    - **Quản lý chính sách**: Toàn bộ nội dung chính sách được hardcode. Điều này làm cho việc quản lý, cập nhật và dịch rất khó khăn. Bất kỳ thay đổi nào đối với văn bản chính sách sẽ yêu cầu sửa đổi code trực tiếp và triển khai lại, điều này cực kỳ không thực tế đối với các tài liệu pháp lý.

#### 18. `/marketing/legal/terms`
- **Nguồn nội dung**: Tương tự như trang `privacy`, toàn bộ nội dung của điều khoản dịch vụ được *hardcode trực tiếp trong JSX*. Nó không sử dụng bản dịch `next-intl` cho chính văn bản chính sách, chỉ cho siêu dữ liệu. Đây là một vấn đề hardcode đáng kể đối với một ứng dụng đa ngôn ngữ.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Ngày `lastUpdated`**: Hardcode thành `'January 1, 2024'`. Tương tự như các trang `cookies` và `privacy`, ngày này nên là động.
    - **`companyName`**: Lấy từ `process.env.NEXT_PUBLIC_APP_NAME` nhưng sẽ sử dụng giá trị mặc định hardcode là `'FinHome'`.
    - **`contactEmail`**: Lấy từ `process.env.CONTACT_EMAIL` nhưng sẽ sử dụng giá trị mặc định hardcode là `'legal@company.com'`.
    - **`websiteUrl`**: Lấy từ `process.env.NEXT_PUBLIC_APP_URL` nhưng sẽ sử dụng giá trị mặc định hardcode là `'https://yourcompany.com'`.
    - **Quản lý chính sách**: Toàn bộ nội dung chính sách được hardcode. Điều này làm cho việc quản lý, cập nhật và dịch rất khó khăn. Bất kỳ thay đổi nào đối với văn bản chính sách sẽ yêu cầu sửa đổi code trực tiếp và triển khai lại, điều này cực kỳ không thực tế đối với các tài liệu pháp lý.
    - **Placeholder cho thẩm quyền pháp lý**: Phần "Luật điều chỉnh" (Governing Law) ghi rõ `[Your Jurisdiction]`, cho thấy một placeholder cần được điền vào.

#### 19. `/marketing/about`
- **Nguồn nội dung**: Trang này được cấu trúc tốt và sử dụng `next-intl` cho tất cả nội dung văn bản, điều này tốt cho quốc tế hóa.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **`StatsSection`**: Mảng `stats` trong `StatsSection` chứa các giá trị hardcode cho `value` (ví dụ: `'10,000+'`, `'500+'`, `'50+'`, `'25+'`). Đây là các số liệu tĩnh và không phản ánh số liệu thống kê động hoặc thời gian thực về công ty. Lý tưởng nhất, chúng nên được lấy từ cơ sở dữ liệu hoặc dịch vụ phân tích.
    - **`ValuesSection`**: Mảng `values` trong `ValuesSection` chứa các biểu tượng, tiêu đề và mô tả hardcode. Mặc dù văn bản được dịch, bản thân nội dung là tĩnh.

#### 20. `/marketing/contact`
- **Nguồn nội dung**: Trang này sử dụng `next-intl` cho hầu hết nội dung văn bản của nó, bao gồm phần giới thiệu, nhãn biểu mẫu và tiêu đề/mô tả thông tin liên hệ.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Chi tiết thông tin liên hệ**: Mảng `contactInfo` chứa các giá trị hardcode cho `details` như email (`'contact@finhome.com'`), điện thoại (`'+1 (555) 123-4567'`), địa điểm văn phòng (`'San Francisco, CA'`) và tình trạng hỗ trợ (`'24/7 Online'`). Lý tưởng nhất, những giá trị này nên là động và có thể cấu hình được, có thể từ các biến môi trường hoặc cơ sở dữ liệu, thay vì hardcode trong component.
    - **Gửi biểu mẫu**: Biểu mẫu gửi đến `/api/contact`. Điều này tốt vì nó sử dụng một route API. Tuy nhiên, bản thân route API cần được điều tra để đảm bảo xử lý đúng cách (ví dụ: gửi email, lưu vào cơ sở dữ liệu).

#### 21. `/auth/forgot-password`
- **Chức năng**: Trang này cho phép người dùng yêu cầu liên kết đặt lại mật khẩu. Nó sử dụng `react-hook-form` với `zodResolver` để xác thực biểu mẫu.
- **Tích hợp dữ liệu**: Nó tương tác với `useAuthActions().resetPassword` để gửi email đặt lại.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Thông báo thành công**: Thông báo thành công (`t('success.spamCheck')`) bao gồm hướng dẫn chung để kiểm tra thư mục spam. Mặc dù đây là điều phổ biến, nhưng nó là một thông báo tĩnh.
    - **Không có xác thực đầu vào email trực tiếp ngoài Zod**: Hàm `resetPassword` được gọi trực tiếp với email. Không có kiểm tra rõ ràng ở phía client để xem email có tồn tại trong hệ thống hay không trước khi cố gắng gửi liên kết đặt lại, đây có thể là một cải tiến nhỏ về bảo mật/UX (mặc dù backend nên xử lý việc này một cách mạnh mẽ).

#### 22. `/auth/signup`
- **Cấu trúc**: Trang này chủ yếu hoạt động như một container cho component `SignUpForm`, được tải bằng `Suspense`. Nó cũng bao gồm một phần thương hiệu/lời chứng thực tĩnh.
- **Nguồn nội dung**: Phần thương hiệu/lời chứng thực sử dụng `next-intl` cho nội dung văn bản của nó.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Thương hiệu/Lời chứng thực**: Trích dẫn lời chứng thực và tác giả được hardcode trong các tệp dịch. Mặc dù được dịch, bản thân nội dung là tĩnh.
    - **`SignUpForm`**: Logic đăng ký cốt lõi nằm trong component `SignUpForm`. Để đánh giá các giá trị hardcode, dữ liệu mock hoặc các chức năng bị thiếu liên quan đến quá trình đăng ký (ví dụ: đăng nhập xã hội, quy tắc xác thực cụ thể, xử lý dữ liệu người dùng), cần phải điều tra `SignUpForm.tsx`.

#### 23. `/auth/reset-password`
- **Chức năng**: Trang này cho phép người dùng đặt lại mật khẩu bằng cách sử dụng mã thông báo từ URL. Nó sử dụng `react-hook-form` với `zodResolver` để xác thực biểu mẫu, bao gồm cả việc khớp mật khẩu.
- **Tích hợp dữ liệu**: Nó tương tác với `useAuthActions().updatePassword` để cập nhật mật khẩu của người dùng.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Thông báo lỗi cho liên kết không hợp lệ**: Thông báo lỗi `t("invalidLink")` được hiển thị nếu thiếu `access_token` hoặc `refresh_token` từ URL. Đây là một thông báo tĩnh.
    - **Thông báo chuyển hướng thành công**: Sau khi cập nhật mật khẩu thành công, người dùng được chuyển hướng đến trang đăng nhập với một thông báo thành công hardcode trong tham số truy vấn URL: `?message=Password updated successfully`. Thông báo này không được dịch và được nhúng trực tiếp vào URL. Tốt hơn là nên sử dụng khóa thông báo đã dịch hoặc một hệ thống thông báo mạnh mẽ hơn.

#### 24. `/auth/login`
- **Cấu trúc**: Trang này tương tự như trang `signup`. Nó chủ yếu hoạt động như một container cho component `LoginForm`, được tải bằng `Suspense`. Nó cũng bao gồm một phần thương hiệu/lời chứng thực tĩnh.
- **Nguồn nội dung**: Phần thương hiệu/lời chứng thực sử dụng `next-intl` cho nội dung văn bản của nó.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Thương hiệu/Lời chứng thực**: Trích dẫn lời chứng thực và tác giả được hardcode trong các tệp dịch. Mặc dù được dịch, bản thân nội dung là tĩnh.
    - **`LoginForm`**: Logic đăng nhập cốt lõi nằm trong component `LoginForm`. Để đánh giá các giá trị hardcode, dữ liệu mock hoặc các chức năng bị thiếu liên quan đến quá trình đăng nhập (ví dụ: đăng nhập xã hội, quy tắc xác thực cụ thể, xử lý dữ liệu người dùng), cần phải điều tra `LoginForm.tsx`.

#### 25. `/auth/access-denied`
- **Chức năng**: Trang này được hiển thị khi người dùng không phải quản trị viên cố gắng truy cập bảng quản trị. Nó cung cấp các tùy chọn để quay lại trang chủ hoặc yêu cầu quyền truy cập.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Tất cả nội dung văn bản**: Toàn bộ nội dung văn bản của trang, bao gồm tiêu đề, mô tả, thông báo, nhãn nút và thông tin liên hệ, được hardcode trực tiếp trong JSX. Nó không sử dụng `next-intl` để dịch. Đây là một vấn đề đáng kể đối với một ứng dụng đa ngôn ngữ.
    - **Email liên hệ**: Email liên hệ `admin@finhome.com` được hardcode ở hai nơi: trong liên kết `mailto` và trong văn bản chân trang. Lý tưởng nhất, điều này nên được cấu hình (ví dụ: thông qua các biến môi trường).

#### 26. `/admin/users`
- **Chức năng**: Trang này được thiết kế để quản lý người dùng quản trị. Nó yêu cầu xác thực quản trị viên bằng cách sử dụng `requireAdmin()`. Nó lấy dữ liệu người dùng ban đầu bằng cách sử dụng `AdminQueries.getAllUsers()`.
- **Cấu trúc**: Nó sử dụng `UserManagementTableConnected` để hiển thị và quản lý người dùng.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Nút "Export" và "Import"**: Các nút này có mặt trong giao diện người dùng nhưng không có trình xử lý `onClick` rõ ràng trên trang này. Điều này cho thấy chức năng xuất và nhập không được triển khai trực tiếp ở đây. Chúng có thể được xử lý trong `UserManagementTableConnected` hoặc là các placeholder cho phát triển trong tương lai.
    - **Nút "Add User"**: Nút này cũng có mặt nhưng thiếu trình xử lý `onClick` rõ ràng để thêm người dùng mới.

#### 27. `/admin/rates`
- **Chức năng**: Trang này được thiết kế để quản lý lãi suất của quản trị viên. Nó yêu cầu xác thực quản trị viên bằng cách sử dụng `requireAdmin()`. Nó lấy dữ liệu lãi suất ban đầu bằng cách sử dụng `AdminQueries.getAllInterestRates()`.
- **Cấu trúc**: Nó sử dụng `InterestRateManagementTableConnected` để hiển thị và quản lý lãi suất.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Nút "Export" và "Import"**: Tương tự như trang `admin/users`, các nút này có mặt trong giao diện người dùng nhưng không có trình xử lý `onClick` rõ ràng trên trang này. Điều này cho thấy chức năng xuất và nhập không được triển khai trực tiếp ở đây. Chúng có thể được xử lý trong `InterestRateManagementTableConnected` hoặc là các placeholder cho phát triển trong tương lai.
    - **Nút "Add Rate"**: Nút này cũng có mặt nhưng thiếu trình xử lý `onClick` rõ ràng để thêm lãi suất mới.

#### 28. `/admin/notifications`
- **Chức năng**: Trang này được thiết kế để quản lý thông báo của quản trị viên. Nó yêu cầu xác thực quản trị viên bằng cách sử dụng `requireAdmin()`. Nó lấy dữ liệu thông báo ban đầu bằng cách sử dụng `AdminQueries.getAllNotifications()`.
- **Cấu trúc**: Nó sử dụng `NotificationManagementTableConnected` để hiển thị và quản lý thông báo.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Nút "Export" và "Import"**: Tương tự như các trang quản trị khác, các nút này có mặt trong giao diện người dùng nhưng không có trình xử lý `onClick` rõ ràng trên trang này. Điều này cho thấy chức năng xuất và nhập không được triển khai trực tiếp ở đây. Chúng có thể được xử lý trong `NotificationManagementTableConnected` hoặc là các placeholder cho phát triển trong tương lai.
    - **Nút "Add Notification"**: Nút này cũng có mặt nhưng thiếu trình xử lý `onClick` rõ ràng để thêm thông báo mới.

#### 29. `/admin/banks`
- **Chức năng**: Trang này được thiết kế để quản lý ngân hàng của quản trị viên. Nó yêu cầu xác thực quản trị viên bằng cách sử dụng `requireAdmin()`. Nó lấy dữ liệu ngân hàng ban đầu bằng cách sử dụng `AdminQueries.getAllBanks()`.
- **Cấu trúc**: Nó sử dụng `BankManagementTableConnected` để hiển thị và quản lý ngân hàng.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Nút "Export" và "Import"**: Tương tự như các trang quản trị khác, các nút này có mặt trong giao diện người dùng nhưng không có trình xử lý `onClick` rõ ràng trên trang này. Điều này cho thấy chức năng xuất và nhập không được triển khai trực tiếp ở đây. Chúng có thể được xử lý trong `BankManagementTableConnected` hoặc là các placeholder cho phát triển trong tương lai.
    - **Nút "Add Bank"**: Nút này cũng có mặt nhưng thiếu trình xử lý `onClick` rõ ràng để thêm ngân hàng mới.

#### 30. `/admin/achievements`
- **Chức năng**: Trang này được thiết kế để quản lý thành tích của quản trị viên. Nó yêu cầu xác thực quản trị viên bằng cách sử dụng `requireAdmin()`. Nó lấy dữ liệu thành tích ban đầu bằng cách sử dụng `AdminQueries.getAllAchievements()`.
- **Cấu trúc**: Nó sử dụng `AchievementManagementTableConnected` để hiển thị và quản lý thành tích.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Nút "Export" và "Import"**: Tương tự như các trang quản trị khác, các nút này có mặt trong giao diện người dùng nhưng không có trình xử lý `onClick` rõ ràng trên trang này. Điều này cho thấy chức năng xuất và nhập không được triển khai trực tiếp ở đây. Chúng có thể được xử lý trong `AchievementManagementTableConnected` hoặc là các placeholder cho phát triển trong tương lai.
    - **Nút "Add Achievement"**: Nút này cũng có mặt nhưng thiếu trình xử lý `onClick` rõ ràng để thêm thành tích mới.

#### 31. `/tools/timeline`
- **Chức năng**: Trang này đóng vai trò là một container cho `TimelineDemo`.
- **Cấu trúc**: Nó sử dụng `TimelineDemo` để hiển thị dòng thời gian tài chính tương tác.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Metadata**: `metadata` (tiêu đề, mô tả, từ khóa) được hardcode trực tiếp trong trang. Mặc dù điều này phổ biến đối với các trang tĩnh, nhưng nó có nghĩa là siêu dữ liệu không động hoặc không thể dịch được thông qua `next-intl`.
    - **`TimelineDemo`**: Chức năng cốt lõi và dữ liệu cho trực quan hóa dòng thời gian nằm trong component `TimelineDemo`. Để đánh giá các giá trị hardcode, dữ liệu mock hoặc các chức năng bị thiếu liên quan đến mô hình kịch bản, quản lý khủng hoảng và phát hiện cơ hội, cần phải điều tra `TimelineDemo.tsx`. Mục `log.txt` trước đó cho "Timeline Utilities" đã đề cập các mốc thời gian/sự kiện hardcode và tác động tài chính đơn giản hóa, điều này cho thấy các vấn đề tiềm ẩn trong `TimelineDemo`.

#### 32. `/tools/charts`
- **Chức năng**: Trang này được thiết kế để giới thiệu các biểu đồ tài chính và trực quan hóa dữ liệu khác nhau. Nó sử dụng `Tabs` để chuyển đổi giữa các bản demo "Phân tích khoản vay", "Danh mục đầu tư" và "So sánh ROI".
- **Nguồn dữ liệu**: Trang này phụ thuộc rất nhiều vào **dữ liệu mock** cho tất cả các bản demo biểu đồ của nó.
    - **`mockLoanData`**: Mảng hardcode cho dữ liệu khấu hao, tổng khoản vay và lãi suất. Phép tính trong quá trình tạo `amortizationData` cũng được hardcode.
    - **`mockPortfolioData`**: Mảng hardcode các thuộc tính với giá mua tĩnh, giá trị hiện tại và tiền thuê/chi phí hàng tháng. Mảng `performance` cũng được hardcode với `totalValue` tăng dần và `totalInvestment`, `monthlyIncome`, `monthlyExpenses` tĩnh.
    - **`mockROIScenarios`**: Mảng hardcode các kịch bản ROI với các khoản đầu tư ban đầu tĩnh, khung thời gian và `expectedReturns` được tính toán với các khoản lợi nhuận cơ bản, tỷ lệ tăng giá và biến động hardcode.
- **Các component được sử dụng**: Nó sử dụng `AmortizationChart`, `PortfolioChart` và `ROIComparisonChart`. Các component này được cung cấp dữ liệu mock.
- **Giá trị hardcode/Chức năng bị thiếu**: 
    - **Huy hiệu tiêu đề**: Các huy hiệu trong tiêu đề ("Phân tích xu hướng", "Phân bổ danh mục đầu tư", "Tính toán ROI", "Tương tác thời gian thực") là văn bản hardcode và không phản ánh trạng thái động hoặc các tính năng thực tế.
    - **`handleDemoInteraction`**: Hàm này kích hoạt thông báo toast và thêm kinh nghiệm/thông báo, nhưng nó không tương tác với dữ liệu thực hoặc thực hiện bất kỳ "tương tác" thực tế nào với biểu đồ ngoài việc hiển thị dữ liệu mock.
    - **Nút "Tương tác"**: Các nút "Tương tác" cho mỗi phần biểu đồ có mặt nhưng chỉ kích hoạt hàm `handleDemoInteraction`, đây là một tương tác mô phỏng.
